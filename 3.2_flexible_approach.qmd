---
title: "Flexible approach"
---

In the the previous section, we learned a 'quick approach' to calculate accessibility directly from within `{r5r}`. The shortcoming of this approach it that is limited to only a few predefined accessibility metrics available in `{r5r}`. Oftentimes, we want to analyze other types of accessibility metrics and/or to have more control of the different steps of the analysis.

In this section, we'll learn how to calculate a travel time matrix and how to use it to compute different types of accessibility metrics. This is a more 'flexible' approach that combines the capabilities of the `{r5r}` and the `{accessibility}` packages. We'll use again the sample data for the city of Porto Alegre (Brazil) that comes with the `{r5r}` package.

<!-- package logos side by side  -->
<div style="text-align: center">
<table><tr><td><img src='/images/r5r_logo.png' width="180"></td><td><img src='/images/accessibility_logo.png' width="180"></td></tr></table>
</div>


This flexible  approach to calculate accessibility only involves 3 steps.

1. Building a routable transport network
2. Calculate a travel time matrix
3. Calculate acessibility

Now let's start by loading load the packages we need:

```{r, message=FALSE}
# allocating memory to java
options(java.parameters = "-Xmx6G")

library(r5r)
library(accessibility)
library(h3jsr)
library(dplyr)
library(mapview)
library(ggplot2)
```


# 1. Building a routable transport network

First, we build the multimodal transport network by passing the path of our data dirctory to the `r5r::setup_r5()` function.

```{r}
# path to data directory
data_path <- system.file("extdata/poa", package = "r5r")

# build network  
r5r_core <- r5r::setup_r5(data_path, 
                          verbose = FALSE)

```

# 2. Calculate a travel time matrix

The second step is to calculate a travel time matrix with door-to-door travel tim estimates from all origins to all destinations. To do this, we use the `r5r::travel_time_matrix()` function.

As basic inputs, this function receives the routable network created above, origin and destination points as `data.frames` with columns `id`, `lon` and `lat`, the transportation mode and the departure time.


```{r}
# read points data
points <- read.csv(file.path(data_path, "poa_hexgrid.csv"))

# routing inputs
mode <- c("walk", "transit")
max_trip_duration <- 30      # in minutes
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
                                 format = "%d-%m-%Y %H:%M:%S")

# calculate travel time matrix
ttm <- r5r::travel_time_matrix(
  r5r_core = r5r_core,
  origins = points,
  destinations = points,
  mode = mode,
  departure_datetime = departure_datetime,
  max_trip_duration = max_trip_duration,
  progress = TRUE
  )
```


::: {.callout-tip}
## Tip
Note that the `r5r::travel_time_matrix()` includes several additional parameters, which allows one to specify the characteristics of trips, including a maximun walking time, a departure time window, the maximum number of public transport legs allowed, etc.

For more info, check the documentation of the function by calling `?r5r::travel_time_matrix` in your R Console or check the documentation on [{r5r} website](https://ipeagit.github.io/r5r/reference/travel_time_matrix.html).
:::


The output is a `data.frame`, which looks like this. It is a matrix in long format indicating the travel time (in minutes) for each origin-destination pair.


```{r}
head(ttm)
```


::: {.callout-note appearance="simple"}
## Processing speed

The `travel_time_matrix()` function uses an extension of the RAPTOR routing algorithm [@conway2017evidencebased], making R5 extremely fast. Depending on the number of origin-destination pairs, `{r5r}` can calculate travel time matrices between 6 and 200 times faster than other multimodal routing softwares [@higgins2022calculating].
:::


# 3. Calculate acessibility 


```{r}
# Now we can use the {accessibility} !

# cumulative accessibility
cum_access_jobs <- accessibility::cumulative_cutoff(
                                                    travel_matrix = ttm, 
                                                    travel_cost = 'travel_time_p50',
                                                    
                                                    land_use_data = points,
                                                    opportunity = 'jobs',
                                                    cutoff = 30
                                                    )

head(cum_access_jobs)




# Interval-based cumulative opportunities
cum_interval <- accessibility::cumulative_interval(
                                    travel_matrix = ttm,
                                    land_use_data = points,
                                    opportunity = "jobs",
                                    travel_cost = "travel_time_p50",
                                    interval = c(20, 40)
                                  )

head(cum_interval)


# gravity-based access
exp_access_jobs <- accessibility::gravity(
                                          travel_matrix = ttm,
                                          land_use_data = points,
                                          opportunity = "schools",
                                          travel_cost = "travel_time_p50",
                                          decay_function = decay_exponential(decay_value = 0.8)
                                          )
  
  
head(exp_access_jobs)




# Accessibility analyses  -------------------------------------------


# spatial distribution

# merge accessibility estimates
access_sf <- left_join(grid, cum_access_jobs, by = c('h3_address'='id'))

```


test

```{r}
# plot
ggplot() +
  geom_sf(data = access_sf, aes(fill = jobs), color= NA) +
  scale_fill_viridis_c(direction = -1, option = 'B') +
  labs(fill = "Number of\nfacilities within\n20 minutes") +
  theme_minimal() +
  theme(axis.title = element_blank()) +
#  facet_wrap(~opportunity) +
  theme_void()

```


# interactive map

```{r}
access_sf |>
#  filter(opportunity == 'jobs') |>
  mapview(zcol = 'jobs')




transit <- r5r::transit_network_to_sf(r5r_core)


stops <- transit$stops

routs <- transit$routes


mapview(routs) + stops


```

s