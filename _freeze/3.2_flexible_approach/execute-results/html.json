{
  "hash": "66bf0a7275a1cb6e9dbaaf5479c2e93a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Flexible\"\nexecute:\n  eval: false\n---\n\n\n\n\ntest `parte1`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# allocating memory to java\noptions(java.parameters = \"-Xmx6G\")\n\nlibrary(r5r)\nlibrary(accessibility)\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(h3jsr)\nlibrary(dplyr)\n\nlibrary(mapview)\n```\n:::\n\n\n\n\ndir\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dir with data\ndata_path <- system.file(\"extdata/poa\", package = \"r5r\")\n\n# data_path <- 'C:://user/my_data'\n\nlist.files(data_path)\n\nbrowseURL(data_path)\n```\n:::\n\n\n\n\n\n\n\n# build network  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr5r_core <- setup_r5(data_path)\n\n\nr5r_core\n```\n:::\n\n\n\n\n\n\n\n# explore data  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read all points in the city\npoints <- read.csv(file.path(data_path, \"poa_hexgrid.csv\"))\n\nhead(points)\n\n\n# retrieve polygons of H3 spatial grid\ngrid <- h3jsr::cell_to_polygon(points$id, simple = FALSE)\n\nhead(grid)\n\n\n\n# merge land use data with spatial grid\ngrid_poa <- dplyr::left_join(grid, \n                             points, \n                             by = c('h3_address'='id'))\n\n\n\n# interactive map\nmapview(grid_poa, zcol = 'jobs')\n```\n:::\n\n\n\n\n\n\n# Accessibility: flexible approach \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# routing inputs\nmode <- c(\"walk\", \"transit\")\nmax_walk_time <- 30      # in minutes\ntravel_time_cutoff <- 20 # in minutes\ntime_window <- 30        # in minutes\ndeparture_datetime <- as.POSIXct(\"13-05-2019 14:00:00\",\n                                 format = \"%d-%m-%Y %H:%M:%S\")\n\n\n# Travel time matrix\n# calculate travel time matrix\nttm <- r5r::travel_time_matrix(r5r_core,\n                               origins = points,\n                               destinations = points,\n                               mode = mode,\n                               departure_datetime = departure_datetime,\n                               max_walk_time = max_walk_time, \n                               max_trip_duration = 60,\n                               time_window = time_window,\n                               progress = TRUE\n                               )\nhead(ttm)\n\n\n\n\n\n\n\n# Now we can use the {accessibility} !\n\n# cumulative accessibility\ncum_access_jobs <- accessibility::cumulative_cutoff(\n                                                    travel_matrix = ttm, \n                                                    travel_cost = 'travel_time_p50',\n                                                    \n                                                    land_use_data = points,\n                                                    opportunity = 'jobs',\n                                                    cutoff = 30\n                                                    )\n\nhead(cum_access_jobs)\n\n\n\n\n# Interval-based cumulative opportunities\ncum_interval <- accessibility::cumulative_interval(\n                                    travel_matrix = ttm,\n                                    land_use_data = points,\n                                    opportunity = \"jobs\",\n                                    travel_cost = \"travel_time_p50\",\n                                    interval = c(20, 40)\n                                  )\n\nhead(cum_interval)\n\n\n# gravity-based access\nexp_access_jobs <- accessibility::gravity(\n                                          travel_matrix = ttm,\n                                          land_use_data = points,\n                                          opportunity = \"schools\",\n                                          travel_cost = \"travel_time_p50\",\n                                          decay_function = decay_exponential(decay_value = 0.8)\n                                          )\n  \n  \nhead(exp_access_jobs)\n\n\n\n\n# Accessibility analyses  -------------------------------------------\n\n\n# spatial distribution\n\n# merge accessibility estimates\naccess_sf <- left_join(grid, cum_access_jobs, by = c('h3_address'='id'))\n```\n:::\n\n\n\n\n\ntest\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot\nggplot() +\n  geom_sf(data = access_sf, aes(fill = jobs), color= NA) +\n  scale_fill_viridis_c(direction = -1, option = 'B') +\n  labs(fill = \"Number of\\nfacilities within\\n20 minutes\") +\n  theme_minimal() +\n  theme(axis.title = element_blank()) +\n#  facet_wrap(~opportunity) +\n  theme_void()\n```\n:::\n\n\n\n\n\n# interactive map\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccess_sf |>\n#  filter(opportunity == 'jobs') |>\n  mapview(zcol = 'jobs')\n\n\n\n\ntransit <- r5r::transit_network_to_sf(r5r_core)\n\n\nstops <- transit$stops\n\nrouts <- transit$routes\n\n\nmapview(routs) + stops\n```\n:::\n\n\n\n\ns",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}