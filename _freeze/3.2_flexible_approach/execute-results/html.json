{
  "hash": "f76eab74b041003a25c43dcecf8473c7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Flexible approach\"\nexecute:\n  eval: false\n---\n\n\n\n\nIn the the previous section, we learned a 'quick approach' to calculate accessibility directly from within `{r5r}`. The shortcoming of this approach it that is limited to only a few predefined accessibility metrics available in `{r5r}`. Oftentimes, we want to analyze other types of accessibility metrics and/or to have more control of the different steps of the analysis.\n\nIn this section, we'll learn how to calculate a travel time matrix and how to use it to compute different types of accessibility metrics. This is a more 'flexible' approach that combines the capabilities of the `{r5r}` and the `{accessibility}` packages. We'll use again the sample data for the city of Porto Alegre (Brazil) that comes with the `{r5r}` package.\n\n<!-- package logos side by side  -->\n<div style=\"text-align: center\">\n<table><tr><td><img src='/images/r5r_logo.png' width=\"180\"></td><td><img src='/images/accessibility_logo.png' width=\"180\"></td></tr></table>\n</div>\n\n\nThis flexible  approach to calculate accessibility only involves 3 steps.\n\n1. Building a routable transport network\n2. Calculate a travel time matrix\n3. Calculate acessibility\n\nNow let's start by loading load the packages we need:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# allocating memory to java\noptions(java.parameters = \"-Xmx6G\")\n\nlibrary(r5r)\nlibrary(accessibility)\nlibrary(h3jsr)\nlibrary(dplyr)\nlibrary(mapview)\nlibrary(ggplot2)\n```\n:::\n\n\n\n\n\n# 1. Building a routable transport network\n\nFirst, we build the multimodal transport network by passing the path of our data dirctory to the `r5r::setup_r5()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dir with data\ndata_path <- system.file(\"extdata/poa\", package = \"r5r\")\n\n# build network  \nr5r_core <- r5r::setup_r5(data_path, \n                          verbose = FALSE)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n# 2. Calculate a travel time matrix\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# routing inputs\nmode <- c(\"walk\", \"transit\")\nmax_walk_time <- 30      # in minutes\ntravel_time_cutoff <- 20 # in minutes\ntime_window <- 30        # in minutes\ndeparture_datetime <- as.POSIXct(\"13-05-2019 14:00:00\",\n                                 format = \"%d-%m-%Y %H:%M:%S\")\n\n\n# Travel time matrix\n# calculate travel time matrix\nttm <- r5r::travel_time_matrix(r5r_core,\n                               origins = points,\n                               destinations = points,\n                               mode = mode,\n                               departure_datetime = departure_datetime,\n                               max_walk_time = max_walk_time, \n                               max_trip_duration = 60,\n                               time_window = time_window,\n                               progress = TRUE\n                               )\nhead(ttm)\n```\n:::\n\n\n\n\n# 3. Calculate acessibility \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Now we can use the {accessibility} !\n\n# cumulative accessibility\ncum_access_jobs <- accessibility::cumulative_cutoff(\n                                                    travel_matrix = ttm, \n                                                    travel_cost = 'travel_time_p50',\n                                                    \n                                                    land_use_data = points,\n                                                    opportunity = 'jobs',\n                                                    cutoff = 30\n                                                    )\n\nhead(cum_access_jobs)\n\n\n\n\n# Interval-based cumulative opportunities\ncum_interval <- accessibility::cumulative_interval(\n                                    travel_matrix = ttm,\n                                    land_use_data = points,\n                                    opportunity = \"jobs\",\n                                    travel_cost = \"travel_time_p50\",\n                                    interval = c(20, 40)\n                                  )\n\nhead(cum_interval)\n\n\n# gravity-based access\nexp_access_jobs <- accessibility::gravity(\n                                          travel_matrix = ttm,\n                                          land_use_data = points,\n                                          opportunity = \"schools\",\n                                          travel_cost = \"travel_time_p50\",\n                                          decay_function = decay_exponential(decay_value = 0.8)\n                                          )\n  \n  \nhead(exp_access_jobs)\n\n\n\n\n# Accessibility analyses  -------------------------------------------\n\n\n# spatial distribution\n\n# merge accessibility estimates\naccess_sf <- left_join(grid, cum_access_jobs, by = c('h3_address'='id'))\n```\n:::\n\n\n\n\n\ntest\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot\nggplot() +\n  geom_sf(data = access_sf, aes(fill = jobs), color= NA) +\n  scale_fill_viridis_c(direction = -1, option = 'B') +\n  labs(fill = \"Number of\\nfacilities within\\n20 minutes\") +\n  theme_minimal() +\n  theme(axis.title = element_blank()) +\n#  facet_wrap(~opportunity) +\n  theme_void()\n```\n:::\n\n\n\n\n\n# interactive map\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccess_sf |>\n#  filter(opportunity == 'jobs') |>\n  mapview(zcol = 'jobs')\n\n\n\n\ntransit <- r5r::transit_network_to_sf(r5r_core)\n\n\nstops <- transit$stops\n\nrouts <- transit$routes\n\n\nmapview(routs) + stops\n```\n:::\n\n\n\n\ns",
    "supporting": [
      "3.2_flexible_approach_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}