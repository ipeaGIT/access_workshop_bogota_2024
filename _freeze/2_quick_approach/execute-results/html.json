{
  "hash": "473c7e3ba482ffb8a828265460fde063",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Quick approach\"\nexecute:\n  eval: false\n---\n\n\n\n\ntest `parte1`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# allocating memory to java\noptions(java.parameters = \"-Xmx6G\")\n\nlibrary(r5r)\nlibrary(accessibility)\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(h3jsr)\nlibrary(dplyr)\n\nlibrary(mapview)\n```\n:::\n\n\n\n\ndir\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dir with data\ndata_path <- system.file(\"extdata/poa\", package = \"r5r\")\n\n# data_path <- 'C:://user/my_data'\n\nlist.files(data_path)\n\nbrowseURL(data_path)\n```\n:::\n\n\n\n\n\n\n\n# build network  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr5r_core <- setup_r5(data_path)\n\n\nr5r_core\n```\n:::\n\n\n\n\n\n\n\n# explore data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read all points in the city\npoints <- data.table::fread(file.path(data_path, \"poa_hexgrid.csv\"))\n\nhead(points)\n\n\n# retrieve polygons of H3 spatial grid\ngrid <- h3jsr::cell_to_polygon(points$id, simple = FALSE)\n\nhead(grid)\n\n\n\n# merge land use data with spatial grid\ngrid_poa <- dplyr::left_join(grid, \n                             points, \n                             by = c('h3_address'='id'))\n\n\n\n# interactive map\nmapview(grid_poa, zcol = 'jobs')\n```\n:::\n\n\n\n\n\n\n# Access: quick and easy \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# routing inputs\nmode <- c(\"walk\", \"transit\")\nmax_walk_time <- 30      # in minutes\ntravel_time_cutoff <- 20 # in minutes\ntime_window <- 30        # in minutes\ndeparture_datetime <- as.POSIXct(\"13-05-2019 14:00:00\",\n                                 format = \"%d-%m-%Y %H:%M:%S\")\n\n\n\n\n\n# calculate accessibility\naccess1 <- r5r::accessibility(r5r_core,\n                              origins = points,\n                              destinations = points, \n                              mode = mode,\n                              opportunities_colnames = c(\"jobs\", \"schools\"),\n                              decay_function = \"step\",\n                              cutoffs = travel_time_cutoff,\n                              departure_datetime = departure_datetime,\n                              max_walk_time = max_walk_time,\n                              time_window = time_window,\n\n                              progress = TRUE\n                              )\n\nhead(access1)\n```\n:::\n\n\n\n\ns",
    "supporting": [
      "2_quick_approach_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}